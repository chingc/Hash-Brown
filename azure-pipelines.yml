# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

jobs:

- job: 'Test'
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 2

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m venv .venv
      source .venv/bin/activate
      python -m pip install --upgrade pip
      pip list -o
      pip install poetry
      poetry config settings.virtualenvs.in-project true
      poetry install
    displayName: 'Install dependencies'

  - script: |
      source .venv/bin/activate
      poetry run pytest tests --junitxml=junit/test-results.xml --cov=hb
    displayName: 'pytest'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()

  - script: |
      source .venv/bin/activate
      poetry run codecov
    displayName: 'codecov'

  - script: |
      source .venv/bin/activate
      poetry run mypy --ignore-missing-imports --strict hb
      poetry run mypy --ignore-missing-imports --strict tests
    displayName: 'mypy'

  # C0111: missing-docstring
  # C0301: line-too-long
  # C0321: multiple-statements
  - script: |
      source .venv/bin/activate
      poetry run pylint -d C0301 hb
      poetry run pylint -d C0111,C0301,C0321 tests
    displayName: 'pylint'

# - job: 'Publish'
#   dependsOn: 'Test'
#   pool:
#     vmImage: 'Ubuntu 16.04'

#   steps:
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: '3.x'
#       architecture: 'x64'

#   - script: python setup.py sdist
#     displayName: 'Build sdist'
